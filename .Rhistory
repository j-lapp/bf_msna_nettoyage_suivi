ech_msna_admin2 <- ech_msna %>%
group_by(ADM2_FR) %>%
summarize(obj_enquetes = sum(survey_buffer))
# importez l'echantillonage
ech_msna <- read.csv("input/echantillonage/clusterSample.csv")
View(echantill_msna)
unique(ech_msna$ADM2_FR)
# grouper par admin2
ech_msna_admin2 <- ech_msna %>%
group_by(ADM2_FR) %>%
summarize(obj_enquetes = sum(survey_buffer))
View(ech_msna_admin2)
# importez l'echantillonage
ech_msna <- read.csv("input/echantillonage/clusterSample.csv", encoding="ISO-8859-1")
unique(ech_msna$ADM2_FR)
# importez l'echantillonage
ech_msna <- read.csv("input/echantillonage/clusterSample.csv", encoding="ISO-8859-1")
echantillonage
# importez l'echantillonage
ech_msna <- read.csv("input/echantillonage/clusterSample.csv", encoding="UTF-8")
Encoding(ech_msna[[ADM2_FR]]) <- "ISO-8859-1"
Encoding(ech_msna$ADM2_FR) <- "ISO-8859-1"
# grouper par admin2
ech_msna_admin2 <- ech_msna %>%
group_by(ADM2_FR) %>%
summarize(obj_enquetes = sum(survey_buffer))
# importez l'echantillonage
ech_msna <- read.csv("input/echantillonage/clusterSample.csv", encoding="UTF-8") %>%
mutate(ADM2_FR_propre = tolower(ADM2_FR))
# importez l'echantillonage
ech_msna <- read.csv("input/echantillonage/clusterSample.csv", encoding="ISO-8859-1") %>%
mutate(ADM2_FR_propre = tolower(ADM2_FR))
# grouper par admin2
ech_msna_admin2 <- ech_msna %>%
group_by(ADM2_FR) %>%
summarize(obj_enquetes = sum(survey_buffer))
Encoding(ech_msna$ADM2_FR_propre) <- "ISO-8859-1"
ech_msna$ADM2_FR_propre <- rm_accent(ech_msna$ADM2_FR_propre)
# grouper par admin2
ech_msna_admin2 <- ech_msna %>%
group_by(ADM2_FR_propre) %>%
summarize(obj_enquetes = sum(survey_buffer))
rm_accent <- function(str,pattern="all") {
if(!is.character(str))
str <- as.character(str)
pattern <- unique(pattern)
if(any(pattern=="Ç"))
pattern[pattern=="Ç"] <- "ç"
symbols <- c(
acute = "áéíóúÁÉÍÓÚýÝ",
grave = "àèìòùÀÈÌÒÙ",
circunflex = "âêîôûÂÊÎÔÛ",
tilde = "ãõÃÕñÑ",
umlaut = "äëïöüÄËÏÖÜÿ",
cedil = "çÇ"
)
sans_accent <- c(
acute = "aeiouAEIOUyY",
grave = "aeiouAEIOU",
circunflex = "aeiouAEIOU",
tilde = "aoAOnN",
umlaut = "aeiouAEIOUy",
cedil = "cC"
)
accentTypes <- c("´","`","^","~","¨","ç")
for(i in which(accentTypes%in%pattern))
str <- chartr(symbols[i],sans_accent[i], str)
return(str)
}
ech_msna$ADM2_FR_propre <- rm_accent(ech_msna$ADM2_FR_propre)
# importez l'echantillonage
ech_msna <- read.csv("input/echantillonage/clusterSample.csv", encoding="ISO-8859-1") %>%
mutate(ADM2_FR_propre = tolower(ADM2_FR))
Encoding(ech_msna$ADM2_FR_propre) <- "ISO-8859-1"
ech_msna$ADM2_FR_propre <- rm_accent(ech_msna$ADM2_FR_propre)
# grouper par admin2
ech_msna_admin2 <- ech_msna %>%
group_by(ADM2_FR_propre) %>%
summarize(obj_enquetes = sum(survey_buffer))
View(ech_msna_admin2)
rm_accent <- function(str,pattern="all") {
if(!is.character(str))
str <- as.character(str)
pattern <- unique(pattern)
if(any(pattern=="Ç"))
pattern[pattern=="Ç"] <- "ç"
symbols <- c(
acute = "áéíóúÁÉÍÓÚýÝ",
grave = "àèìòùÀÈÌÒÙ",
circunflex = "âêîôûÂÊÎÔÛ",
tilde = "ãõÃÕñÑ",
umlaut = "äëïöüÄËÏÖÜÿ",
cedil = "çÇ"
)
sans_accent <- c(
acute = "aeiouAEIOUyY",
grave = "aeiouAEIOU",
circunflex = "aeiouAEIOU",
tilde = "aoAOnN",
umlaut = "aeiouAEIOUy",
cedil = "cC"
)
accentTypes <- c("´","`","^","~","¨","ç")
if(any(c("all","al","a","todos","t","to","tod","todo")%in%pattern)) # opcao retirar todos
return(chartr(paste(symbols, collapse=""), paste(sans_accent, collapse=""), str))
for(i in which(accentTypes%in%pattern))
str <- chartr(symbols[i],sans_accent[i], str)
return(str)
}
# importez l'echantillonage
ech_msna <- read.csv("input/echantillonage/clusterSample.csv", encoding="ISO-8859-1") %>%
mutate(ADM2_FR_propre = tolower(ADM2_FR))
Encoding(ech_msna$ADM2_FR_propre) <- "ISO-8859-1"
ech_msna$ADM2_FR_propre <- rm_accent(ech_msna$ADM2_FR_propre)
# grouper par admin2
ech_msna_admin2 <- ech_msna %>%
group_by(ADM2_FR_propre) %>%
summarize(obj_enquetes = sum(survey_buffer))
View(ech_msna_admin2)
admin2 <- left_join(temps_admin2, ech_msna_admin2, by = c("admin2", "ADM2_FR"))
temps_admin2 <- df %>%
group_by(admin2) %>%
summarise(n_enquetes = n())
# grouper par enumerateur
temps_enumerateur <- df %>%
group_by(admin1, enumerator_id) %>%
summarise(n_enquetes = n(),
moy_temps = round(mean(duration_entretien),0))
admin2 <- left_join(temps_admin2, ech_msna_admin2, by = c("admin2", "ADM2_FR_propre"))
admin2 <- left_join(temps_admin2, ech_msna_admin2, by = c(admin2, ADM2_FR_propre))
admin2 <- left_join(temps_admin2, ech_msna_admin2, by = c("admin2" = "ADM2_FR_propre"))
View(admin2)
accent_rm <- function(x) {
x <- tolower(x)
x <- gsub("  "," ",x)
x <- gsub("  "," ",x)
#supprime l'espace en debut
Nettoyage <- x[substr(x, 0, 1)==" "]
x <- replace(x,substr(x, 0, 1)==" ",substr(Nettoyage, 2, nchar(Nettoyage)))
#supprime l'espace en fin
Nettoyage <- x[substr(x, nchar(x), nchar(x)+1)==" "]
x <- replace(x,substr(x, nchar(x), nchar(x)+1)==" ", substr(Nettoyage, 1, nchar(Nettoyage)-1))
x <- gsub("?|?|?","a",x)
x <- gsub("?|?|?|?","e",x)
x <- gsub("?|?","i",x)
x <- gsub("?|?","o",x)
x <- gsub("?|?|?","u",x)
x <- gsub(" |-|'","_",x)
return (x)
}
ech_msna$ADM2_FR_propre <- accent_rm(ech_msna$ADM2_FR_propre)
# grouper par admin2
ech_msna_admin2 <- ech_msna %>%
group_by(ADM2_FR_propre) %>%
summarize(obj_enquetes = sum(survey_buffer))
# importez l'echantillonage
ech_msna <- read.csv("input/echantillonage/clusterSample.csv", encoding="ISO-8859-1") %>%
mutate(ADM2_FR_propre = tolower(ADM2_FR))
Encoding(ech_msna$ADM2_FR_propre) <- "ISO-8859-1"
ech_msna$ADM2_FR_propre <- accent_rm(ech_msna$ADM2_FR_propre)
# grouper par admin2
ech_msna_admin2 <- ech_msna %>%
group_by(ADM2_FR_propre) %>%
summarize(obj_enquetes = sum(survey_buffer))
accent_rm <- function(x) {
x <- tolower(x)
x <- gsub("  "," ",x)
x <- gsub("  "," ",x)
#supprime l'espace en debut
Nettoyage <- x[substr(x, 0, 1)==" "]
x <- replace(x,substr(x, 0, 1)==" ",substr(Nettoyage, 2, nchar(Nettoyage)))
#supprime l'espace en fin
Nettoyage <- x[substr(x, nchar(x), nchar(x)+1)==" "]
x <- replace(x,substr(x, nchar(x), nchar(x)+1)==" ", substr(Nettoyage, 1, nchar(Nettoyage)-1))
x <- gsub("?|?|?","a",x)
x <- gsub("?|?|?|?","e",x)
x <- gsub("?|?","i",x)
x <- gsub("?|?","o",x)
x <- gsub("?|?|?","u",x)
x <- gsub(" |-|'","_",x)
return (x)
}
# importez l'echantillonage
ech_msna <- read.csv("input/echantillonage/clusterSample.csv", encoding="ISO-8859-1") %>%
mutate(ADM2_FR_propre = tolower(ADM2_FR))
Encoding(ech_msna$ADM2_FR_propre) <- "ISO-8859-1"
ech_msna$ADM2_FR_propre <- accent_rm(ech_msna$ADM2_FR_propre)
# grouper par admin2
ech_msna_admin2 <- ech_msna %>%
group_by(ADM2_FR_propre) %>%
summarize(obj_enquetes = sum(survey_buffer))
View(admin2)
# grouper par enumerateur
temps_enumerateur <- df %>%
group_by(admin1, enumerator_id) %>%
summarise(n_enquetes = n(),
moy_temps = round(mean(duration_entretien),0))
temps_admin2 <- df %>%
group_by(admin2) %>%
summarise(n_enquetes = n())
admin2 <- left_join(temps_admin2, ech_msna_admin2, by = c("admin2" = "ADM2_FR_propre"))
View(ech_msna_admin2)
# importez l'echantillonage
ech_msna <- read.csv("input/echantillonage/clusterSample.csv", encoding="ISO-8859-1") %>%
mutate(ADM2_FR_propre = tolower(ADM2_FR))
ech_msna$ADM2_FR_propre <- accent_rm(ech_msna$ADM2_FR_propre)
# grouper par admin2
ech_msna_admin2 <- ech_msna %>%
group_by(ADM2_FR_propre) %>%
summarize(obj_enquetes = sum(survey_buffer))
# importez l'echantillonage
ech_msna <- read.csv("input/echantillonage/clusterSample.csv", encoding="UTF-8") %>%
mutate(ADM2_FR_propre = tolower(ADM2_FR))
# importez l'echantillonage
ech_msna <- read.csv("input/echantillonage/clusterSample.csv", encoding="UTF-8")
# importez l'echantillonage
ech_msna <- read.csv("input/echantillonage/clusterSample.csv", encoding="ISO-8859-1")
View(ech_msna)
ech_msna$ADM2_FR_propre <- accent_rm(ech_msna$ADM2_FR_propre)
# grouper par admin2
ech_msna_admin2 <- ech_msna %>%
group_by(ADM2_FR_propre) %>%
summarize(obj_enquetes = sum(survey_buffer))
# importez l'echantillonage
ech_msna <- read.csv("input/echantillonage/clusterSample.csv") %>%
mutate(ADM2_FR_propre = tolower(ADM2_FR))
ech_msna$ADM2_FR_propre <- accent_rm(ech_msna$ADM2_FR_propre)
# grouper par admin2
ech_msna_admin2 <- ech_msna %>%
group_by(ADM2_FR_propre) %>%
summarize(obj_enquetes = sum(survey_buffer))
# importez l'echantillonage
ech_msna <- read.csv("input/echantillonage/clusterSample.csv", encoding="ISO-8859-1") %>%
mutate(ADM2_FR_propre = tolower(ADM2_FR))
Encoding(ech_msna$ADM2_FR_propre) <- "ISO-8859-1"
ech_msna$ADM2_FR_propre <- janitor::make_clean_names(ech_msna$ADM2_FR_propre)
# grouper par admin2
ech_msna_admin2 <- ech_msna %>%
group_by(ADM2_FR_propre) %>%
summarize(obj_enquetes = sum(survey_buffer))
# importez l'echantillonage
ech_msna <- read.csv("input/echantillonage/clusterSample.csv", encoding="ISO-8859-1") %>%
mutate(ADM2_FR_propre = tolower(ADM2_FR))
Encoding(ech_msna$ADM2_FR_propre) <- "ISO-8859-1"
ech_msna$ADM2_FR_propre <- janitor::make_clean_names(ech_msna$ADM2_FR_propre)
# grouper par admin2
ech_msna_admin2 <- ech_msna %>%
group_by(ADM2_FR_propre) %>%
summarize(obj_enquetes = sum(survey_buffer))
# grouper par enumerateur
temps_enumerateur <- df %>%
group_by(admin1, enumerator_id) %>%
summarise(n_enquetes = n(),
moy_temps = round(mean(duration_entretien),0))
# grouper par admin2
ech_msna_admin2 <- ech_msna %>%
group_by(ADM2_FR) %>%
summarize(obj_enquetes = sum(survey_buffer))
View(ech_msna)
View(ech_msna_admin2)
install.packages("geojsonR ")
rm_accent <- function(x) {
x <- tolower(x)
x <- gsub("  "," ",x)
x <- gsub("  "," ",x)
#supprime l'espace en debut
Nettoyage <- x[substr(x, 0, 1)==" "]
x <- replace(x,substr(x, 0, 1)==" ",substr(Nettoyage, 2, nchar(Nettoyage)))
#supprime l'espace en fin
Nettoyage <- x[substr(x, nchar(x), nchar(x)+1)==" "]
x <- replace(x,substr(x, nchar(x), nchar(x)+1)==" ", substr(Nettoyage, 1, nchar(Nettoyage)-1))
# x <- gsub("?|?|?","a",x)
# x <- gsub("?|?|?|?","e",x)
# x <- gsub("?|?","i",x)
# x <- gsub("?|?","o",x)
# x <- gsub("?|?|?","u",x)
# x <- gsub(" |-|'","_",x)
return (x)
}
# script de fonctions
source("R/fonctions.R")
# variables
limite_temps <- 20
# importez les donnees brutes
df <- read_excel("input/donnees_brutes/bfa2002_msna_jour35_nettoyage_2020.xlsx", sheet ="bfa2002")
# date de collection de donnees
df$today <- as.Date(df$start, "%Y-%m-%d")
# check du temps start - end avec la fonction de temps
df <- ver_temps(df, limite_temps)
library(readxl)
library(dplyr)
library(lubridate)
# script de fonctions
source("R/fonctions.R")
# variables
limite_temps <- 20
# importez les donnees brutes
df <- read_excel("input/donnees_brutes/bfa2002_msna_jour35_nettoyage_2020.xlsx", sheet ="bfa2002")
# date de collection de donnees
df$today <- as.Date(df$start, "%Y-%m-%d")
# check du temps start - end avec la fonction de temps
df <- ver_temps(df, limite_temps)
# script de fonctions
source("R/fonctions.R")
# variables
limite_temps <- 20
# importez les donnees brutes
data <- read_excel("input/donnees_brutes/bfa2002_msna_jour35_nettoyage_2020.xlsx", sheet ="bfa2002")
# date de collection de donnees
data$today <- as.Date(data$start, "%Y-%m-%d")
# check du temps start - end avec la fonction de temps
data$difftime <- calc_duration(data)
# verifier le duration de l'entretien
calc_duration<-function(df){
df[["start"]]<-lubridate::ymd_hms(df[["start"]])
df[["end"]]<-lubridate::ymd_hms(df[["end"]])
difftime(as.POSIXct(df[["end"]]),as.POSIXct(df[["start"]]),units = "mins")
}
# check du temps start - end avec la fonction de temps
data$difftime <- calc_duration(data)
# script de fonctions
source("R/fonctions.R")
# variables
limite_temps <- 20
# importez les donnees brutes
data <- read_excel("input/donnees_brutes/bfa2002_msna_jour35_nettoyage_2020.xlsx", sheet ="bfa2002")
# date de collection de donnees
data$today <- as.Date(data$start, "%Y-%m-%d")
# check du temps start - end avec la fonction de temps
data$difftime <- calc_duration(data)
data$difftime
difftime
?difftime
# verifier le duration de l'entretien
ver_temps <- function(df, limite_temps){
df <- df %>%
dplyr::mutate(start = lubridate::ymd_hms(start), end = lubridate::ymd_hms(end),
duration_entretien = difftime(as.POSIXct(end),
as.POSIXct(start),
units = "mins")
)
return(df)
}
# check du temps start - end avec la fonction de temps
data <- ver_temps(data)
table(is.na(data$start))
data$duration_entretien
library(readxl)
library(dplyr)
library(lubridate)
# script de fonctions
source("R/fonctions.R")
# variables
limite_temps <- 20
# importez les donnees brutes
data <- read_excel("input/donnees_brutes/bfa2002_msna_jour35_nettoyage_2020.xlsx", sheet ="bfa2002")
# date de collection de donnees
data$today <- as.Date(data$start, "%Y-%m-%d")
# importez les donnees brutes
data <- read_excel("input/donnees_brutes/bfa2002_msna_jour35_nettoyage_2020.xlsx", sheet ="bfa2002", na.strings= c("NA", "", "N/A"))
?read_excel
# importez les donnees brutes
data <- read_excel("input/donnees_brutes/bfa2002_msna_jour35_nettoyage_2020.xlsx", sheet ="bfa2002", na = c("NA", "", "N/A"))
# date de collection de donnees
data$today <- as.Date(data$start, "%Y-%m-%d")
# check du temps start - end avec la fonction de temps
data <- ver_temps(data)
# check du temps start - end avec la fonction de temps
data <- ver_temps(data)
# verifier le duration de l'entretien
ver_temps <- function(df){
df <- df %>%
dplyr::mutate(start = lubridate::ymd_hms(start, truncated = 1), end = lubridate::ymd_hms(end, truncated = 1),
duration_entretien = difftime(as.POSIXct(end),
as.POSIXct(start),
units = "mins")
)
return(df)
}
# check du temps start - end avec la fonction de temps
data <- ver_temps(data)
table(is.na(dAta$start))
table(is.na(data$start))
table(is.na(data$duration_entretien))
data$duration_entretien
library(readxl)
library(dplyr)
library(lubridate)
# script de fonctions
source("R/fonctions.R")
# variables
limite_temps <- 20
# script de fonctions
source("R/fonctions_nettoyage.R")
# variables
limite_temps <- 20
# importez les donnees brutes
data <- read_excel("input/donnees_brutes/bfa2002_msna_jour35_nettoyage_2020.xlsx", sheet ="bfa2002", na = c("NA", "", "N/A"))
# date de collection de donnees
data$today <- as.Date(data$start, "%Y-%m-%d")
# check du temps start - end avec la fonction de temps
data <- ver_temps(data)
library(readxl)
library(dplyr)
library(lubridate)
# script de fonctions
source("R/fonctions_nettoyage.R")
# variables
limite_temps <- 20
# importez les donnees brutes
data <- read_excel("input/donnees_brutes/bfa2002_msna_jour35_nettoyage_2020.xlsx", sheet ="bfa2002", na = c("NA", "", "N/A")) %>%
filter(!is.na(start))
# date de collection de donnees
data$today <- as.Date(data$start, "%Y-%m-%d")
# check du temps start - end avec la fonction de temps
data <- ver_temps(data)
library(readxl)
library(dplyr)
library(lubridate)
# script de fonctions
source("R/fonctions_nettoyage.R")
# variables
limite_temps <- 20
# importez les donnees brutes
data <- read_excel("input/donnees_brutes/bfa2002_msna_jour35_nettoyage_2020.xlsx", sheet ="bfa2002", na = c("NA", "", "N/A")) %>%
filter(!is.na(start))
# date de collection de donnees
data$today <- as.Date(data$start, "%Y-%m-%d")
# check du temps start - end avec la fonction de temps
data <- ver_temps(data)
####################################################################################################
##### SUIVI ########################################################################################
# importez l'echantillonage
ech_msna <- read.csv("input/echantillonage/clusterSample.csv", encoding="ISO-8859-1") %>%
mutate(ADM2_FR_propre = tolower(ADM2_FR))
Encoding(ech_msna$ADM2_FR_propre) <- "ISO-8859-1"
ech_msna$ADM2_FR_propre <- janitor::make_clean_names(ech_msna$ADM2_FR_propre)
library(dplyr)
library(knitr)
# grouper par admin2
ech_msna_admin2 <- ech_msna %>%
group_by(ADM2_FR) %>%
summarize(obj_enquetes = sum(survey_buffer))
##### operations group by et summarize
# grouper par enumerateur
temps_enumerateur <- df %>%
group_by(admin1, enumerator_id) %>%
summarise(n_enquetes = n(),
moy_temps = round(mean(duration_entretien),0))
library(dplyr)
library(knitr)
# grouper par admin2
ech_msna_admin2 <- ech_msna %>%
group_by(ADM2_FR) %>%
summarize(obj_enquetes = sum(survey_buffer))
##### operations group by et summarize
# grouper par enumerateur
temps_enumerateur <- data %>%
group_by(admin1, enumerator_id) %>%
summarise(n_enquetes = n(),
moy_temps = round(mean(duration_entretien),0))
temps_admin2 <- data  %>%
group_by(admin2) %>%
summarise(n_enquetes = n())
admin2 <- left_join(temps_admin2, ech_msna_admin2, by = c("admin" = "ADM2_FR_propre"))
library(dplyr)
library(knitr)
# grouper par admin2
ech_msna_admin2 <- ech_msna %>%
group_by(ADM2_FR) %>%
summarize(obj_enquetes = sum(survey_buffer))
##### operations group by et summarize
# grouper par enumerateur
temps_enumerateur <- data %>%
group_by(admin1, enumerator_id) %>%
summarise(n_enquetes = n(),
moy_temps = round(mean(duration_entretien),0))
temps_admin2 <- data  %>%
group_by(admin2) %>%
summarise(n_enquetes = n())
admin2 <- left_join(temps_admin2, ech_msna_admin2, by = c("admin" = "ADM2_FR_propre"))
library(readxl)
library(dplyr)
library(lubridate)
# script de fonctions
source("R/fonctions_nettoyage.R")
# importez les donnees brutes
data <- read_excel("input/donnees_brutes/bfa2002_msna_jour35_nettoyage_2020.xlsx", sheet ="bfa2002", na = c("NA", "", "N/A")) %>%
filter(!is.na(start))
# date de collection de donnees
data$today <- as.Date(data$start, "%Y-%m-%d")
# check du temps start - end avec la fonction de temps
data <- ver_temps(data)
table(is.na(data))
table(is.na(data$start))
# importez les donnees brutes
data <- read_excel("input/donnees_brutes/bfa2002_msna_jour35_nettoyage_2020.xlsx", sheet ="bfa2002", na = c("NA", "", "N/A")) %>%
filter(!is.na(start))
View(data)
library(janitor)
# script de fonctions
source("R/fonctions_nettoyage.R")
# importez les donnees brutes
data <- read_excel("input/donnees_brutes/bfa2002_msna_jour35_nettoyage_2020.xlsx", sheet ="bfa2002", na = c("NA", "", "N/A")) %>%
filter(!is.na(start)) %>%
make_clean_names()
View(data)
# date de collection de donnees
data$today <- as.Date(data$start, "%Y-%m-%d")
# check du temps start - end avec la fonction de temps
data <- ver_temps(data)
library(readxl)
